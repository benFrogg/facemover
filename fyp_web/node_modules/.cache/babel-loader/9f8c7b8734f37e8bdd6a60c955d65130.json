{"ast":null,"code":"var _jsxFileName = \"D:\\\\FYP_Face_Animation\\\\fyp_full\\\\fyp_web\\\\src\\\\components\\\\Animator\\\\ImageUploader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport './ImageUploader.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImageUploader() {\n  _s();\n\n  const [image, setImage] = useState([]);\n  {\n    /*const {getRootProps, getInputProps, isDragActive} = useDropzone({\r\n       accept: \"image/jpg, image/png, image/jpeg\",\r\n       onDrop: (acceptedFiles) => {\r\n           setImage (\r\n               acceptedFiles.map((upFile) => Object.assign(upFile, {\r\n                   preview: URL.createObjectURL(upFile)\r\n               }))\r\n           )\r\n       }\r\n    })*/\n  }\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragReject,\n    acceptedFiles,\n    open\n  } = useDropzone({\n    accept: \"image/jpg, image/png, image/jpeg\",\n    noClick: true,\n    noKeyboard: true,\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n    }\n  });\n  {\n    /*const uploadImage = (e) => {\r\n       const requestOptions = {\r\n         method: \"POST\",\r\n         headers: {\r\n           \"Content-Type\": \"multipart/form-data\",\r\n         },\r\n         body: JSON.stringify(\r\n           `file=@${image};type=image/jpeg`\r\n         ),\r\n       };\r\n    \n       const response = await fetch(\"/get-image\", requestOptions);\r\n       const data = await response.json();\r\n         if (!response.ok) {\r\n           console.log(\"Error uploading\")\r\n         } else {\r\n           console.log(\"Successful upload\")\r\n       }\r\n    };*/\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-uploader\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"image-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n        style: {\n          border: \"3px solid black\",\n          height: \"300px\",\n          width: \"250px\",\n          textAlign: \"center\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"imageBoxHover\",\n          children: [\"Drop Image Here\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 84\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 89\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: 12\n            },\n            children: \"(*/File type: .jpg/.jpeg/.png only*/)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 94\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 40\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"imageBox\",\n          children: [\"Drag n' Drop Image\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 209\n          }, this), \"OR\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 216\n          }, this), /*#__PURE__*/_jsxDEV(\"u\", {\n            children: \"Browse Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 221\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 240\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 245\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: 12\n            },\n            children: \"(*/File type: .jpg/.jpeg/.png only*/)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 250\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 167\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onChange: uploadImage,\n        children: image.map(upFile => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: upFile.preview,\n              alt: \"Preview\",\n              style: {\n                width: \"250\",\n                height: \"300px\",\n                border: \"3px solid #fff\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImageUploader, \"S5DJ466cRbAqhbExTXEKcaYklQw=\", false, function () {\n  return [useDropzone];\n});\n\n_c = ImageUploader;\nexport default ImageUploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"sources":["D:/FYP_Face_Animation/fyp_full/fyp_web/src/components/Animator/ImageUploader.js"],"names":["React","useState","useDropzone","ImageUploader","image","setImage","getRootProps","getInputProps","isDragActive","isDragReject","acceptedFiles","open","accept","noClick","noKeyboard","onDrop","setFiles","map","file","Object","assign","preview","URL","createObjectURL","border","height","width","textAlign","display","justifyContent","alignItems","fontSize","uploadImage","upFile"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport './ImageUploader.css';\r\n\r\nfunction ImageUploader() {\r\n    const [image, setImage] = useState([]);\r\n\r\n    {/*const {getRootProps, getInputProps, isDragActive} = useDropzone({\r\n        accept: \"image/jpg, image/png, image/jpeg\",\r\n        onDrop: (acceptedFiles) => {\r\n            setImage (\r\n                acceptedFiles.map((upFile) => Object.assign(upFile, {\r\n                    preview: URL.createObjectURL(upFile)\r\n                }))\r\n            )\r\n        }\r\n    })*/}\r\n\r\n    const {getRootProps, getInputProps, isDragActive, isDragReject, acceptedFiles, open} = useDropzone({\r\n        accept: \"image/jpg, image/png, image/jpeg\",\r\n        noClick: true,\r\n        noKeyboard: true,\r\n        onDrop: acceptedFiles => {\r\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\r\n                preview: URL.createObjectURL(file)\r\n            })))\r\n        }\r\n    })\r\n\r\n    {/*const uploadImage = (e) => {\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n          body: JSON.stringify(\r\n            `file=@${image};type=image/jpeg`\r\n          ),\r\n        };\r\n    \r\n        const response = await fetch(\"/get-image\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n            console.log(\"Error uploading\")\r\n          } else {\r\n            console.log(\"Successful upload\")\r\n        }\r\n    };*/}\r\n\r\n    return (\r\n        <div className=\"image-uploader\">\r\n            <header className=\"image-header\">\r\n                <div {...getRootProps()} style={{border: \"3px solid black\", height:\"300px\", width:\"250px\", textAlign: \"center\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                    <input {...getInputProps()} />\r\n                    {\r\n                        isDragActive ? <p className=\"imageBoxHover\">Drop Image Here<br/><br/><p style={{fontSize:12}}>(*/File type: .jpg/.jpeg/.png only*/)</p></p> : <p className=\"imageBox\">Drag n' Drop Image<br/>OR<br/><u>Browse Image</u><br/><br/><p style={{fontSize:12}}>(*/File type: .jpg/.jpeg/.png only*/)</p></p>\r\n                    }\r\n                </div>\r\n                <div onChange={uploadImage}>\r\n                    {image.map((upFile) => {\r\n                        return (\r\n                            <div>\r\n                                <img src={upFile.preview} alt=\"Preview\" style={{width:\"250\", height:\"300px\", border:\"3px solid #fff\"}} />\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUploader;"]},"metadata":{},"sourceType":"module"}